name: Go CI

run-name: Go CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  pull-requests: write
  issues: write
  contents: read

jobs:
  test:
    runs-on: ubuntu-22.04

    steps:
      - uses: actions/checkout@v4

      - uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest

      - uses: actions/setup-go@v5
        with:
          go-version: ^1.23

      - name: Get dependencies
        run: go mod download

      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./... > test_output.txt
          echo "TEST_EXIT_CODE=$?" >> $GITHUB_ENV

      - name: Parse test results
        run: |
          TOTAL=$(grep -c "^===" test_output.txt || true)
          PASSED=$(grep -c "^--- PASS:" test_output.txt || true)
          FAILED=$(grep -c "^--- FAIL:" test_output.txt || true)
          SKIPPED=$(grep -c "^--- SKIP:" test_output.txt || true)
          echo "TOTAL_TESTS=$TOTAL" >> $GITHUB_ENV
          echo "PASSED_TESTS=$PASSED" >> $GITHUB_ENV
          echo "FAILED_TESTS=$FAILED" >> $GITHUB_ENV
          echo "SKIPPED_TESTS=$SKIPPED" >> $GITHUB_ENV

      - name: Generate coverage report
        run: |
          go tool cover -func=coverage.txt > coverage.out
          echo "COVERAGE=$(grep total: coverage.out | grep -o '[0-9]\+\.[0-9]\+')" >> $GITHUB_ENV

      - name: Find Comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/find-comment@v3
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Test Coverage

      - name: Update or Create Comment
        if: github.event_name == 'pull_request'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          COMMENT_MARKER="Test Results and Coverage Report"

          if [ "${{ env.TEST_EXIT_CODE }}" == "0" ]; then
            TEST_STATUS=":white_check_mark: Tests Passed"
          else
            TEST_STATUS=":x: Tests Failed"
          fi

          COMMENT_BODY="## $TEST_STATUS
          ### Test Results
          - Total Tests: ${{ env.TOTAL_TESTS }}
          - Passed: ${{ env.PASSED_TESTS }}
          - Failed: ${{ env.FAILED_TESTS }}
          - Skipped: ${{ env.SKIPPED_TESTS }}
          ### Coverage Report
          :bar_chart: Test Coverage: ${{ env.COVERAGE }}%
          [Full test and coverage report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          <!-- $COMMENT_MARKER -->"

          # Find existing comment
          COMMENT_IDS=$(gh pr view $PR_NUMBER --json comments --jq '.comments[] | select(.body | contains("'"$COMMENT_MARKER"'")) | .id')

          echo "Existing comment ID: $COMMENT_IDS"

          # Delete existing comments
          # https://docs.github.com/ja/rest/pulls/comments#delete-a-review-comment-for-a-pull-request
          if [ -n "$COMMENT_IDS" ]; then
            echo "$COMMENT_IDS" | while read -r comment_id; do
              if [ -n "$comment_id" ]; then
                gh api --method DELETE -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/issues/comments/$comment_id
                echo "Deleted comment $comment_id"
              fi
            done
          else
            echo "No existing comments found with the marker"
          fi


          # Create new comment
          gh pr comment $PR_NUMBER --body "$COMMENT_BODY"
